{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import React, { useState } from 'react';\n// import useChat from '../useChat';\n// import '../style/chat.css';\n// const ChatRoom = (props) => {\n// \tconst { roomId } = props.match.params;\n// \tconst { messages, sendMessage } = useChat(roomId);\n// \tconst [newMessage, setNewMessage] = useState('');\n// \tconst handleNewMessageChange = (event) => {\n// \t\tsetNewMessage(event.target.value);\n// \t};\n// \tconst handleSendMessage = () => {\n// \t\tsendMessage(newMessage);\n// \t\tsetNewMessage('');\n// \t};\n// \treturn (\n// \t\t<div className='chat-room'>\n// \t\t\t<h1 className='room-name'>Room: {roomId}</h1>\n// \t\t\t<div className='messages'>\n// \t\t\t\t<ol className='message-list'>\n// \t\t\t\t\t{messages.map((message, i) => (\n// \t\t\t\t\t\t<li\n// \t\t\t\t\t\t\tkey={i}\n// \t\t\t\t\t\t\tclassName={`message-item ${\n// \t\t\t\t\t\t\t\tmessage.ownedByCurrentUser ? 'my-message' : 'received-message'\n// \t\t\t\t\t\t\t}`}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\t{message.body}\n// \t\t\t\t\t\t</li>\n// \t\t\t\t\t))}\n// \t\t\t\t</ol>\n// \t\t\t</div>\n// \t\t\t<textarea\n// \t\t\t\tvalue={newMessage}\n// \t\t\t\tonChange={handleNewMessageChange}\n// \t\t\t\tplaceholder='Write message...'\n// \t\t\t\tclassName='new-message-input-field'\n// \t\t\t/>\n// \t\t\t<button onClick={handleSendMessage} className='send-message-button'>\n// \t\t\t\tSend\n// \t\t\t</button>\n// \t\t</div>\n// \t);\n// };\n// export default ChatRoom;\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = roomId => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const socketRef = useRef();\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, message => {\n      const incomingMessage = { ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id\n      };\n      setMessages(messages => [...messages, incomingMessage]);\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  const sendMessage = messageBody => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id\n    });\n  };\n\n  return {\n    messages,\n    sendMessage\n  };\n};\n\n_s(useChat, \"rJUxOyV7d92WYkbiDZQ/Q3CnO+M=\");\n\nexport default useChat;","map":{"version":3,"names":["useEffect","useRef","useState","socketIOClient","NEW_CHAT_MESSAGE_EVENT","SOCKET_SERVER_URL","useChat","roomId","messages","setMessages","socketRef","current","query","on","message","incomingMessage","ownedByCurrentUser","senderId","id","disconnect","sendMessage","messageBody","emit","body"],"sources":["/home/kalu/messengerApp/client/src/Components/ChatRoom.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import useChat from '../useChat';\n// import '../style/chat.css';\n\n// const ChatRoom = (props) => {\n// \tconst { roomId } = props.match.params;\n// \tconst { messages, sendMessage } = useChat(roomId);\n// \tconst [newMessage, setNewMessage] = useState('');\n\n// \tconst handleNewMessageChange = (event) => {\n// \t\tsetNewMessage(event.target.value);\n// \t};\n\n// \tconst handleSendMessage = () => {\n// \t\tsendMessage(newMessage);\n// \t\tsetNewMessage('');\n// \t};\n\n// \treturn (\n// \t\t<div className='chat-room'>\n// \t\t\t<h1 className='room-name'>Room: {roomId}</h1>\n// \t\t\t<div className='messages'>\n// \t\t\t\t<ol className='message-list'>\n// \t\t\t\t\t{messages.map((message, i) => (\n// \t\t\t\t\t\t<li\n// \t\t\t\t\t\t\tkey={i}\n// \t\t\t\t\t\t\tclassName={`message-item ${\n// \t\t\t\t\t\t\t\tmessage.ownedByCurrentUser ? 'my-message' : 'received-message'\n// \t\t\t\t\t\t\t}`}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\t{message.body}\n// \t\t\t\t\t\t</li>\n// \t\t\t\t\t))}\n// \t\t\t\t</ol>\n// \t\t\t</div>\n// \t\t\t<textarea\n// \t\t\t\tvalue={newMessage}\n// \t\t\t\tonChange={handleNewMessageChange}\n// \t\t\t\tplaceholder='Write message...'\n// \t\t\t\tclassName='new-message-input-field'\n// \t\t\t/>\n// \t\t\t<button onClick={handleSendMessage} className='send-message-button'>\n// \t\t\t\tSend\n// \t\t\t</button>\n// \t\t</div>\n// \t);\n// };\n\n// export default ChatRoom;\n\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = (roomId) => {\n  const [messages, setMessages] = useState([]);\n  const socketRef = useRef();\n\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { roomId },\n    });\n\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  const sendMessage = (messageBody) => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n    });\n  };\n\n  return { messages, sendMessage };\n};\n\nexport default useChat;\n"],"mappings":";;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,sBAAsB,GAAG,gBAA/B;AACA,MAAMC,iBAAiB,GAAG,uBAA1B;;AAEA,MAAMC,OAAO,GAAIC,MAAD,IAAY;EAAA;;EAC1B,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAMQ,SAAS,GAAGT,MAAM,EAAxB;EAEAD,SAAS,CAAC,MAAM;IACdU,SAAS,CAACC,OAAV,GAAoBR,cAAc,CAACE,iBAAD,EAAoB;MACpDO,KAAK,EAAE;QAAEL;MAAF;IAD6C,CAApB,CAAlC;IAIAG,SAAS,CAACC,OAAV,CAAkBE,EAAlB,CAAqBT,sBAArB,EAA8CU,OAAD,IAAa;MACxD,MAAMC,eAAe,GAAG,EACtB,GAAGD,OADmB;QAEtBE,kBAAkB,EAAEF,OAAO,CAACG,QAAR,KAAqBP,SAAS,CAACC,OAAV,CAAkBO;MAFrC,CAAxB;MAIAT,WAAW,CAAED,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcO,eAAd,CAAf,CAAX;IACD,CAND;IAQA,OAAO,MAAM;MACXL,SAAS,CAACC,OAAV,CAAkBQ,UAAlB;IACD,CAFD;EAGD,CAhBQ,EAgBN,CAACZ,MAAD,CAhBM,CAAT;;EAkBA,MAAMa,WAAW,GAAIC,WAAD,IAAiB;IACnCX,SAAS,CAACC,OAAV,CAAkBW,IAAlB,CAAuBlB,sBAAvB,EAA+C;MAC7CmB,IAAI,EAAEF,WADuC;MAE7CJ,QAAQ,EAAEP,SAAS,CAACC,OAAV,CAAkBO;IAFiB,CAA/C;EAID,CALD;;EAOA,OAAO;IAAEV,QAAF;IAAYY;EAAZ,CAAP;AACD,CA9BD;;GAAMd,O;;AAgCN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}